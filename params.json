{"name":"Research tricks","tagline":"Doing research like a boss.","body":"Scientific Research Tricks\r\n==========================\r\n\r\nResearch is awesome! But today, due to several reasons, it is lacking some\r\nthings and making some error during its development.\r\n\r\nMy objective with this project is to gather some tips and tools to improve how\r\nresearch is done.\r\n\r\n\r\nCopyright 2014 DPPG@ON Organization.\r\n\r\nLicense: Creative Commons Attribution 4.0 International License.\r\n\r\nhttp://creativecommons.org/licenses/by/4.0/\r\n\r\n\r\nVersion Control System\r\n----------------------\r\n\r\nAt some point of your research did you make a bad choice or a have done mistake\r\nand had to go back some steps? Of course you did. Research is not done\r\nfollowing a recipe on some cookbook. Mistakes are done. One should try to avoid\r\nmistakes, but do not regret about it. Learn from it.\r\n\r\nThe problem that I want to address here is what can you do when do you do a\r\nmistake. You will probably want to take some steps back. If you are a very\r\nmethodical person, you will have every step taken wrote down on some logbook or\r\nsimilar. But I guess that not everybody is like this.\r\n\r\nOr maybe you keep track of changes like this:\r\n\r\n![A Story Told in file names](http://www.phdcomics.com/comics/archive/phd052810s.gif \"PhD comics #1323\")\r\n\r\nThis is not an optimized way of tracking your files. I can see only one\r\npossible future to this and it is a totally mess.\r\n\r\nSo, why do you not try a\r\n[Version Control System (VCS)](http://en.wikipedia.org/wiki/Revision_control)?\r\n\r\nA VCS [\"is the management of changes to documents, computer programs, large\r\nweb sites, and other\r\ncollections of information.\"](http://en.wikipedia.org/wiki/Revision_control).\r\nWith this you can keep track of any change you do on your research and fall-back\r\n to any point that you want.\r\n\r\nOne VCS widely used today is [`git`](http://git-scm.com/). It was created by\r\n[Linus Torvalds](http://en.wikipedia.org/wiki/Linus_Torvalds), the same creator\r\nof the [Linux Kernel](http://en.wikipedia.org/wiki/Linux_kernel). Fun fact:\r\nlike Linux, Linus named `git` after himself. Git is British English slang for a\r\nstupid or unpleasant person, and Linus said [\"I'm an egotistical bastard, and\r\nI name all my projects after myself. First 'Linux', now 'git'\r\n.\"](https://git.wiki.kernel.org/index.php/GitFaq#Why_the_.27Git.27_name.3F).\r\nGit is free and open source.\r\n\r\nYou can try the basics of `git`\r\n[here](http://try.github.io/levels/1/challenges/1) and this\r\n[book](http://git-scm.com/book) by [Scott Chacon](http://scottchacon.com) or\r\nthis\r\n[another book](http://chimera.labs.oreilly.com/books/1230000000561/index.html)\r\nby [Richard E. Silverman](http://www.qoxp.net/) can also help.\r\n\r\nBackup and Sharing\r\n------------------\r\n\r\nSo do you want to do a backup of your research and/or work on multiple\r\ncomputers? You could try a USB stick or a portable HD. That is a way to do it,\r\nbut maybe not the best. Maybe a cloud storage service like\r\n[Dropbox](https://www.dropbox.com/) or\r\n[Google Drive](https://drive.google.com/). I would guess that this a better way\r\nto do it. Dropbox has a rudimentary VCS built-in. Maybe you want to share with\r\nyour collaborators? You could create a shared folder on Dropbox.\r\n\r\nBut may I suggest something better? Something stronger?\r\n[Github](https://github.com/about).\r\nIt [\"is a web-based hosting service for software development projects that use\r\nthe Git revision control system.\"](https://en.wikipedia.org/wiki/GitHub) You\r\ncan store all your Git projects on Github and share with you collaborators.\r\nYou can browse your and others research online on your preferred browser.\r\nToday you almost not need to know `git` to use it.\r\n\r\nRegular expressions\r\n-------------------\r\n\r\nHow to find some pattern on a text.\r\n\r\n\r\nUseful links:\r\n\r\n* [Debbuggex](http://www.debuggex.com/): nice resource to check regex;\r\n* [Regex Crossword](http://regexcrossword.com/): practice or learn some regex\r\n  skills by playing crossword.\r\n\r\n\r\nShell\r\n-----\r\n\r\n[\"A Unix shell is a command-line interpreter or shell that provides a \r\ntraditional user interface for the Unix operating system and for \r\nUnix-like systems.\"][shell]. Some people are afraid of the \r\nshell. Do not. The shell is one of your most powerful ally. If you know it \r\nwell and dominate it, what you can do is almost magic.\r\n\r\nIf your are running Linux, you will probably have [Bash][bash] as your \r\n[Unix shell][shell]. If you are running Windows you can try [Cygwin][cygwin].\r\n\r\nI highly recommend seeing the [Software Carpentry][swcarpentry] tutorial \r\n[track on the Shell][shell_track]. It is very good and it will give you all the basics \r\non the Shell.\r\n\r\nFor example, below I listed some commands that can speed up your workflow.\r\n\r\n* List files on one folder and send it to a file:\r\n  `ls path/to/folder > list_of_files.txt`;\r\n* Finding files:\r\n  `find path/to/folder -name filename`\r\n* Finding files with RegEx:\r\n  `find path/to/folder | grep 'add-your-regex-here'`\r\n* Finding patterns inside files with RegEx:\r\n  `find path/to/folder | xargs grep 'add-your-regex-here'`\r\n* Removing files found with previous command:\r\n  `find path/to/folder | grep 'add-your-regex-here' | xargs rm`\r\n* Compare directories:\r\n  `diff -rq dirA dirB`\r\n* Convert all figures in a folder from one type to other:\r\n  `for f in *.jpg; do convert ./\"$f\" ./\"${f%.jpg}.png\"; done`\r\n\r\n\r\nBonus Tip: [Bash git prompt](https://github.com/magicmonty/bash-git-prompt)\r\nis a resource that gives basic `git` information of the repository directly\r\non the prompt.\r\n\r\n[bash]: https://en.wikipedia.org/wiki/Bash_(Unix_shell)\r\n[shell]: http://en.wikipedia.org/wiki/Unix_shell\r\n[cygwin]: http://www.cygwin.com/\r\n[swcarpentry]: http://software-carpentry.org/index.html\r\n[shell_track]: http://software-carpentry.org/v4/shell/index.html\r\n\r\n\r\n\r\nScript programming\r\n------------------\r\n\r\nYou can learn python basics at\r\n[CodeAcademy](http://www.codecademy.com/tracks/python). I have tried and it is\r\nvery nice.\r\n\r\nAnother interactive way to learn python is the\r\n[learnpython.org](http://www.learnpython.org/). Give it a try.\r\n\r\nThere is a tutorial for non-programmers\r\n[here](http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3).\r\n\r\nThere is also the now famous\r\n[Learn Python the Hard Way](http://learnpythonthehardway.org/). It seems that\r\nit focus on exercise and repetition as learning tools.\r\n\r\nThis [link](http://pythonbooks.revolunet.com/) and\r\n[this](http://readwrite.com/2011/03/25/python-is-an-increasingly-popu#awesm=~o98NZtqHzwYofe)\r\ncontains a compilation of free books.\r\n\r\nIf you want to know which python modules/packages are installed in your system,\r\nyou just have to type in your shell:\r\n\r\n~~~\r\npip freeze\r\n~~~\r\n\r\nAnd of course, this assumes that you have\r\n[`pip`](https://pypi.python.org/pypi/pip) installed in your system.\r\n\r\n\r\nInstalling python packages on your system could result on some headache.\r\nFor example, I stayed one afternoon trying to figure it out why my package was\r\nnot running after I reinstalled it. The reason was that I was getting conflicts\r\nbetween the new and the old version. The solution was to use\r\n[virtualenv](https://pypi.python.org/pypi/virtualenv) and\r\n[`virtualenvwrapper`][venvw].\r\n\r\n[venvw]: http://virtualenvwrapper.readthedocs.org/en/latest/index.html\r\n\r\nas the name says `virtualenv` creates a python virtual environment. this allows\r\nthe user to install any python package without worryng in messing the system\r\npackages. also, the user can create any number of virtual environments,\r\nfor example, one for each project.\r\n\r\nGood editor\r\n-----------\r\n\r\nit is very important to have a good editor.\r\n\r\nif you are the nerd-geek-kind-of-awesome guy, you should probably try\r\nvim or emacs.\r\n\r\nAutomation\r\n----------\r\n\r\nhow to automate things using python. this is great when you do a miskate and\r\nhad to run several things again.\r\n\r\nsome links to check:\r\n\r\n* [@astrofrog course](https://github.com/astrofrog/py4sci)\r\n* [@jrjohansson tutorials](https://github.com/jrjohansson/scientific-python-lectures)\r\n\r\n\r\nnegative results\r\n-------------\r\n\r\nnegative results are still results. publish them. why publish it?\r\njust look the following cartoon and i guess you will understand.\r\n\r\n![negative data](http://upmic.files.wordpress.com/2013/06/negative-data.png \"from the upturned microscope\")\r\n\r\ngot it?\r\n\r\nprobably, a journal will not accepted a paper showing negative results. and\r\nbecause of this, enters [figshare](http://www.figshare.com).\r\nThis resource [\"allows users to upload any file format to be made visualisable\r\nin the browser so that figures, datasets, media, papers, posters, presentations\r\nand filesets can be disseminated in a way that the current scholarly publishing\r\nmodel does not allow.](http://figshare.com/about). Each image, presententation\r\nor any other kind of data receives a\r\n[DOI](http://en.wikipedia.org/wiki/Digital_object_identifier)\r\nthat will uniquely identify your data and it will allow others to cite it.\r\n\r\nVisualization\r\n-------------\r\n\r\nHow to visualize your data is a very important step. I must say, crucial. It is\r\nvery hard to obtain any results without it. Unless you are a statistic ninja,\r\nand even that, you would probably use visualization to convince your audience\r\nof your findings.\r\n\r\nOne of the fathers of this field is\r\n[Edward Tufte][Tufte]. I have not yet read it, but his first book, [The Visual\r\nDisplay of Quantitative Information][Tufte_book], is very highly recommended.\r\n\r\n[Tufte]: http://www.edwardtufte.com/tufte/index\r\n[Tufte_book]: http://www.edwardtufte.com/tufte/books_vdqi\r\n\r\nSo, how one can visualize data? There are several tools available. You could\r\nuse a spreadsheet editor, like [LibreOffice Calc][OOffice]. The resources are\r\nlimited, but you can get a visualization quickly and it is very good when one\r\ndoes not have any other skils. And if you want to make better plots with it,\r\nyou will probably want to try [RAW](http://raw.densitydesign.org/).\r\n\r\n[OOffice]: https://www.libreoffice.org/features/calc/\r\n\r\nOne can draw it by hand, or use [GIMP](http://www.gimp.org/) or\r\n[Inkscape](http://inkscape.org/), for example. But, for that, it would probably\r\nbe good to have some artistic skills. And also, if something change on your\r\ndata, you would probably have to start it from scratch.\r\n\r\nAlso, one could code some routine to do visualization. The advantage of this\r\nmethod is that probably you will only have to code it once, i.e. the code is\r\ndata independent. If the data changes, you only have to run it again. Well,\r\nachieving this will only depend of your coding skill.\r\n\r\nThere are several good visualization toolkits on the wild, like\r\n[`D3`](http://d3js.org/) for javascript. If you want to learn D3, the book by\r\n[Scott Murray](http://alignedleft.com/about/),\r\n_Interactive Data Visualization for the Web_, is now\r\n[available online for free][d3_free]. And, for python, we have\r\n[`Matplotlib`](http://matplotlib.org/index.html),\r\n[`Mayavi`](http://code.enthought.com/projects/mayavi/)\r\nand [`ggplot`](https://github.com/yhat/ggplot?source=cc#ggplot-from-yhat).\r\n[`Ggplot2`](http://ggplot2.org/) is a very well-known plotting system for\r\n[R][Rlang] and `ggplot` is specially good for those that are learning python\r\nbut have a solid background in R. And if you want the `D3` awesomeness in your\r\npython code, try [Vincent](https://github.com/wrobstory/vincent).\r\n\r\n[Rlang]: http://www.r-project.org/\r\n[d3_free]: http://chimera.labs.oreilly.com/books/1230000000345/index.html\r\n\r\n\r\nAlso, [Bret Victor](http://worrydream.com/#!/Bio) is working on a software\r\nthat will allow to dynamically draw your visualizations. If you want to know\r\nmore about it, you can check his [talk](http://vimeo.com/66085662) and\r\n[here](http://worrydream.com/DrawingDynamicVisualizationsTalkAddendum/).\r\nIt is really impressive!\r\n\r\nAnd according to [Nathan Yau](https://twitter.com/flowingdata) from\r\n[Flowing Data](http://flowingdata.com/), there is only one way to learn\r\nvisualization: [work with data][fd_post].\r\n\r\n[fd_post]: http://flowingdata.com/2013/07/12/getting-started-with-visualization-after-getting-started-with-visualization/\r\n\r\nI also recommend his [first book](http://flowingdata.com/visualize-this/) as a\r\nstarting point to do visualization. He address what type of visualization there\r\nare, the tools available and all on a very pleasant reading content.\r\nI have not yet read his [second](http://flowingdata.com/data-points/), but I am\r\nvery anxious to get a copy.\r\n\r\n","google":"UA-44761514-1","note":"Don't delete this file! It's used internally to help with page regeneration."}