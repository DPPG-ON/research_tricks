{"name":"Research tricks","tagline":"Doing research like a boss.","body":"Scientific Research Tricks\r\n==========================\r\n\r\nResearch is awesome! But today, due to several reasons, it is lacking some things and making some error during its \r\ndevelopment.\r\n\r\nMy objective with this project is to gather some tips and tools to improve how research is done.\r\n\r\n\r\nVersion Control System\r\n----------------------\r\n\r\nAt some point of your research did you make a bad choice or a have done mistake and had to go back some steps? \r\nOf course you did. Research is not done following a recipe on some cookbook. Mistakes are done. \r\nOne should try to avoid mistakes, but do not regret about it. Learn from it. \r\n\r\nThe problem that I want to address here is what can you do when do you do a mistake.  \r\nYou will probably want to take some steps back. If you are a very methodical person, you will have every step \r\ntaken wrote down on some logbook or similar. But I guess that not everybody is like this. \r\n\r\nOr maybe you keep track of changes like this:\r\n\r\n![A Stroy Told in file Names](http://www.phdcomics.com/comics/archive/phd052810s.gif \"PhD comics #1323\")\r\n\r\nThis is not an optimized way of tracking your files. I can see only one possible future to this and it is a \r\ntotally mess.\r\n\r\nSo, why do you not try a Version Control System (VCS)?\r\n\r\nA VCS [\"is the management of changes to documents, computer programs, large web sites, and other collections of \r\ninformation.\"] (http://en.wikipedia.org/wiki/Revision_control) With this you can keep track of any change you \r\ndo on your research and fallback to any point that you want.\r\n\r\nOne VCS widely used today is [`git`](http://git-scm.com/). It was created by Linus Torvalds, the same creator \r\nof the Linux Operation System. Fun fact: like Linux, Linus named `git` after himself. Git is British English \r\nslang for a stupid or unpleasant person, and Linus said [\"I'm an egotistical bastard, and I name all my projects \r\nafter myself. First 'Linux', now 'git'.\"](https://git.wiki.kernel.org/index.php/GitFaq#Why_the_.27Git.27_name.3F). \r\nGit is free and open source. \r\n\r\nYou can try the basics of `git` [here](http://try.github.io/levels/1/challenges/1) and this \r\n[book](http://git-scm.com/book) by [Scott Chacon](https://twitter.com/chacon) or this \r\n[another book](http://chimera.labs.oreilly.com/books/1230000000561/index.html) by \r\n[Richard E. Silverman](http://www.qoxp.net/) can also help.\r\n\r\nBackup and Sharing\r\n------------------\r\n\r\nSo do you want to do a backup of your research and/or work on multiple computers? You could try a USB stick or \r\na portable HD. That is a way to do it, but maybe not the best. Maybe a cloud storage service like \r\n[Dropbox](https://www.dropbox.com/) or [Google Drive](https://drive.google.com/). I would guess that \r\nthis a better way to do it. Dropbox has a rudimentary VCS built-in. Maybe you want to share with your \r\ncollaborators? You could create a shared folder on Dropbox.\r\n\r\nBut may I suggest something better. Something stronger.\r\n[Github](https://github.com/about). \r\nIt [\"is a web-based hosting service for software development projects that use the Git revision control \r\nsystem.\"](https://en.wikipedia.org/wiki/GitHub) You can store all your Git projects on Github and share \r\nwith you collaborators. You can browse your and others research online on your preferred browser. \r\nToday you almot not need to know `git` to use it.\r\n\r\nRegular expressions\r\n-------------------\r\n\r\nHow to find some pattern on a text.\r\n\r\n\r\nUseful links:\r\n\r\n* [Debbuggex](http://www.debuggex.com/): nice resource to check regex;\r\n* [Regex Crossword](http://regexcrossword.com/): practice or learn some regex skills by playing crossword.\r\n\r\n\r\nBash\r\n----\r\nYou are doing your research on Linux, right? No!? Well, so you will probably want to skip this section. \r\n\r\nIf your are running Linux, you will probably have [Bash][bash] \r\nas your [Unix shell](http://en.wikipedia.org/wiki/Unix_shell). Some people are afraid of the terminal. \r\nDo not. The terminal is one of your most powerful ally. If you know it well and dominate it, what you can \r\ndo is almost magical. \r\n\r\n[bash]: https://en.wikipedia.org/wiki/Bash_(Unix_shell)\r\n\r\nTalk about some commands and use of pipe to send the result of one command to another\r\n\r\ne.g\r\n* List files on one folder and send it to a file: `ls path/to/folder > list_of_files.txt`; \r\n* Finfing files: `find path/to/folder -name filename`\r\n* Finding files with RegEx: `find path/to/folder | grep 'add-your-regex-here'`\r\n* Finding patterns inside files with RegEx: `find path/to/folder | xargs grep 'add-your-regex-here'`\r\n* Removing files found with previous command: `find path/to/folder | grep 'add-your-regex-here' | xargs rm`\r\n* Compare directories: `diff -rq dirA dirB`\r\n* Convert all figures in a folder from one type to other: `for f in *.jpg; do convert ./\"$f\" ./\"${f%.jpg}.png\"; done`\r\n \r\n\r\nBonus Tip: [Bash git prompt](https://github.com/magicmonty/bash-git-prompt) is a resource that gives basic \r\n`git` information of the repository directly on the prompt.\r\n\r\n\r\nScript programming\r\n------------------\r\n\r\nTalk how to use Script programming, specially about python.\r\n\r\nYou can learn python basics at [CodeAcademy](http://www.codecademy.com/tracks/python). I have tried and it is very \r\nnice.\r\n\r\nAnother interactive way to lear python is the [learnpython.org](http://www.learnpython.org/). Give it a try.\r\n\r\nThere is a tutorial for non-programmers [here](http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3).\r\n\r\nThere is also the now famous [Learn Python the Hard Way](http://learnpythonthehardway.org/). It seems that it focus \r\non exercise and repetion as learning tools.\r\n\r\nThis [link](http://pythonbooks.revolunet.com/) and \r\n[this](http://readwrite.com/2011/03/25/python-is-an-increasingly-popu#awesm=~o98NZtqHzwYofe) contains a compilation \r\nof free books. \r\n\r\nIf you want to know which python modules/packages are installed in your system, you just have to type in your shell:\r\n\r\n~~~\r\npip freeze\r\n~~~\r\n\r\nAnd of course, this assumes that you have [`pip`](https://pypi.python.org/pypi/pip) installed in your system.\r\n\r\n\r\nInstalling python packages on your system could result on some headache. For example, I stayed on afternoon trying \r\nto figure it out why my package was not running after I reinstalled. The reason was that I was getting conflicts between \r\nthe new and old version. The solution was to use [virtualenv](https://pypi.python.org/pypi/virtualenv) and \r\n[`virtualenvwrapper`](http://virtualenvwrapper.readthedocs.org/en/latest/index.html).\r\n\r\nAs the name says `virtualenv` creates a python virtual environment. This allows the user to install any python package \r\nwithout worryng in messing the system packages. Also, the user can create any number of virtual environments, for example, \r\none for each project.\r\n\r\n\r\nWrite more about this.\r\n\r\nGood Editor\r\n-----------\r\n\r\nIt is very important to have a good editor. \r\n\r\nIf you are the nerd-geek-kind-of-awesome guy, you should probably try VIM or EMACS.\r\n\r\nNote to myself: Describe VIM, EMACS, Geany.\r\n\r\n\r\nUnit testing\r\n------------\r\n\r\n\r\nAutomation\r\n----------\r\n\r\nHow to automate things using python. This is great when you do a miskate and had to run several things again.\r\n\r\nSome links to check:\r\n\r\n* [@astrofrog course](https://github.com/astrofrog/py4sci)\r\n* [@jrjohansson tutorials](https://github.com/jrjohansson/scientific-python-lectures)\r\n\r\n\r\nNegative results\r\n-------------\r\n\r\nNegative results are still results. Publish them. Why publish it? Just look the following cartoon and I guess you \r\nwill understand.\r\n\r\n![Negative Data](http://upmic.files.wordpress.com/2013/06/negative-data.png \"From the Upturned Microscope\")\r\n\r\nGot it?\r\n\r\nProbably, a journal will not accepted a paper showing negative results. And because of this, enters \r\n[Figshare](http://www.figshare.com). \r\nThis resource [\"allows users to upload any file format to be made visualisable in the browser so that figures, \r\ndatasets, media, papers, posters, presentations and filesets can be disseminated in a way that the current \r\nscholarly publishing model does not allow.](http://figshare.com/about)\r\nEach image, presententation or any other kind of data receives a \r\n[DOI](http://en.wikipedia.org/wiki/Digital_object_identifier) that will uniquely identify you data and it will allow \r\nothers to cite it.\r\n\r\nVisualization\r\n-------------\r\n\r\nVisualize your data is a very important step. I must say, crucial. It is very hard to obtain any results without it. \r\nUnless you are a statistic ninja, and even that, you would probably use visualization to convince your audience of \r\nyour findings.\r\n\r\nOn of the fathers of this field is [Edward Tufte](http://www.edwardtufte.com/tufte/index). I have not yet read it, but \r\nhirs first book, [The Visual Display of Quantitative Information](http://www.edwardtufte.com/tufte/books_vdqi) \r\nis very highly recommended.\r\n__Write more about him.__\r\n\r\nSo, how one can visualize data? There are several tools available. You could use a spreadsheet editor, like \r\n[LibreOffice Calc](https://www.libreoffice.org/features/calc/). The resources are limited, but you can get a \r\nvisualization quickly and it is very good when one does not have any other skils. And if you want to make better plots \r\nwith it, you will probably want to try [RAW](http://raw.densitydesign.org/).\r\n\r\nOne can draw it by hand, or use [GIMP](http://www.gimp.org/) or [Inkscape](http://inkscape.org/), for example. But, \r\nfor that, it would probably be good to have some artistic skills. And also, if something change on your data, you would \r\nprobably have to start it from scratch.\r\n\r\nAlso, one could code some routine to do visualization. The advantage of this method is that probably you will only have \r\nto code it once, i.e. the code is data independent. If the data changes, you only have to run it again. Well, achieving \r\nthis will only depend of your coding skill.\r\n\r\nThere is several good visuzalization toolkits on the wild, like [D3](http://d3js.org/) for javascript,\r\nand, for python, we have [Matplotlib](http://matplotlib.org/index.html) and \r\n[Mayavi](http://code.enthought.com/projects/mayavi/). If you want to learn D3, the book by \r\n[Scott Murray](http://alignedleft.com/about/), \r\n_Interactive Data Visualization for the Web_, is now \r\n[available online for free](http://chimera.labs.oreilly.com/books/1230000000345/index.html).\r\n\r\nAlso, [Bret Victor](http://worrydream.com/#!/Bio) is working on a software that will allow to dynamically draw your \r\nvisualizations. If you want to know more about it, you can check his [talk](http://vimeo.com/66085662) and \r\n[here](http://worrydream.com/DrawingDynamicVisualizationsTalkAddendum/). It is really impressive!\r\n\r\nAnd according to [Nathan Yau](https://twitter.com/flowingdata) from [Flowing Data](http://flowingdata.com/), \r\nthere is only one way to learn visualization: \r\n[work with data](http://flowingdata.com/2013/07/12/getting-started-with-visualization-after-getting-started-with-visualization/)\r\n\r\nI also recommend his [first book](http://flowingdata.com/visualize-this/) as a starting point to visualization. He \r\naddress what type of visuazliation there are, the tools available and all on a very pleasant reading content.\r\nI have not yet read his [second](http://flowingdata.com/data-points/), but I am very anxious to get a copy. \r\n\r\n","google":"UA-44761514-1","note":"Don't delete this file! It's used internally to help with page regeneration."}